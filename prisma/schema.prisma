generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ENUMs
enum UserRole {
  customer
  admin
  employee
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  COMPLETED
  CANCELLED
  REFUNDED
}

enum BlogTextOrImage {
  text
  image
}

// TABLES
model Account {
  id       String   @id @default(uuid()) @db.Uuid
  name     String?  @db.VarChar(255)
  email    String?  @unique @db.VarChar(255)
  phone    String?  @unique @db.VarChar(255)
  role     UserRole @default(customer)
  password String?  @db.VarChar(255)
  avatar   String?  @db.VarChar(255)

  orders       Order[]
  employee     Employee?
  salaryChange EmployeeSalaryHistory[] @relation("ChangedBy")
  Blog         Blog[]
  BlogComment  BlogComment[]
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String    @unique @db.VarChar(255)
  products Product[]
}

model Product {
  id          String  @id @default(uuid()) @db.Uuid
  name        String  @db.VarChar(255)
  description String?
  price       Decimal @db.Decimal(15, 2)
  category_id Int

  category   Category         @relation(fields: [category_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  variants   ProductVariant[]
  orderItems OrderItem[]
}

model ProductVariant {
  id         Int    @id @default(autoincrement())
  product_id String @db.Uuid
  color      String @db.VarChar(50)

  product Product               @relation(fields: [product_id], references: [id], onDelete: Cascade)
  sizes   ProductVariantSize[]
  images  ProductVariantImage[]
}

model ProductVariantSize {
  id         Int    @id @default(autoincrement())
  variant_id Int
  size       String @db.VarChar(20)
  stock      Int    @default(0)

  variant ProductVariant @relation(fields: [variant_id], references: [id], onDelete: Cascade)
}

model ProductVariantImage {
  id         Int     @id @default(autoincrement())
  variant_id Int
  url        String
  is_primary Boolean @default(false)

  variant ProductVariant @relation(fields: [variant_id], references: [id], onDelete: Cascade)
}

model Order {
  id                String      @id @default(uuid()) @db.Uuid
  date              DateTime    @default(now())
  customer_id       String?     @db.Uuid
  status            OrderStatus @default(PENDING)
  payment_method_id Int

  address        String?      @db.VarChar(255)
  contact_phone  String?      @db.VarChar(15)

  customer      Account?      @relation(fields: [customer_id], references: [id], onUpdate: Cascade, onDelete: SetNull)
  paymentMethod PaymentMethod @relation(fields: [payment_method_id], references: [id])
  orderItems    OrderItem[]
}

model OrderItem {
  id         Int     @id @default(autoincrement())
  order_id   String  @db.Uuid
  product_id String  @db.Uuid
  quantity   Int     @default(1)
  price      Decimal @db.Decimal(15, 2)
  size       String  @db.VarChar(20)

  order   Order   @relation(fields: [order_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  product Product @relation(fields: [product_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model PaymentMethod {
  id          Int     @id @default(autoincrement())
  name        String  @unique @db.VarChar(20)
  description String?
  is_active   Boolean @default(true)

  orders Order[]
}

model Employee {
  account_id String   @id @db.Uuid
  position   String   @db.VarChar(100)
  salary     Decimal  @db.Decimal(12, 2)
  hire_date  DateTime @default(now())
  department String   @db.VarChar(100)
  is_working Boolean  @default(true)
  manager_id String?  @db.Uuid

  account       Account                 @relation(fields: [account_id], references: [id], onDelete: Cascade)
  manager       Employee?               @relation("ManagerSubordinates", fields: [manager_id], references: [account_id], onUpdate: Cascade, onDelete: SetNull)
  subordinates  Employee[]              @relation("ManagerSubordinates")
  salaryHistory EmployeeSalaryHistory[]
}

model EmployeeSalaryHistory {
  id          Int      @id @default(autoincrement())
  employee_id String   @db.Uuid
  old_salary  Decimal? @db.Decimal(12, 2)
  new_salary  Decimal  @db.Decimal(12, 2)
  changed_at  DateTime @default(now())
  changed_by  String   @db.Uuid
  reason      String?

  employee Employee @relation(fields: [employee_id], references: [account_id], onDelete: Restrict)
  changer  Account  @relation("ChangedBy", fields: [changed_by], references: [id])
}

model Blog {
  id          String   @id @default(uuid()) @db.Uuid
  title       String   @db.VarChar(255)
  category_id Int
  author_id   String   @db.Uuid
  createdAt   DateTime @default(now())

  category    BlogCategory  @relation(fields: [category_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  author      Account       @relation(fields: [author_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  paragraph   Paragraph[]
  BlogComment BlogComment[]

  tags BlogTag[]
}

model Tag {
  id   Int    @id @default(autoincrement())
  name String @unique @db.VarChar(50)

  blogs BlogTag[]
}

model BlogTag {
  blog_id String @db.Uuid
  tag_id  Int

  blog Blog @relation(fields: [blog_id], references: [id], onDelete: Cascade)
  tag  Tag  @relation(fields: [tag_id], references: [id], onDelete: Cascade)

  @@id([blog_id, tag_id])
}

model BlogCategory {
  id          Int    @id @default(autoincrement())
  name        String @db.VarChar(100)
  description String @db.VarChar(255)
  Blog        Blog[]
}

model Paragraph {
  id        String          @id @default(uuid()) @db.Uuid
  blog_id   String          @db.Uuid
  type      BlogTextOrImage @default(text)
  image_url String?
  text      String
  order     Int

  blogId Blog @relation(fields: [blog_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model BlogComment {
  id         String  @id @default(uuid()) @db.Uuid
  account    Account @relation(fields: [account_id], references: [id])
  account_id String  @db.Uuid
  comment    String
  blog       Blog    @relation(fields: [blog_id], references: [id])
  blog_id    String  @db.Uuid

  reply_to String?       @db.Uuid
  parent   BlogComment?  @relation("CommentReplies", fields: [reply_to], references: [id])
  replies  BlogComment[] @relation("CommentReplies")

  createdAt DateTime @default(now())
}
